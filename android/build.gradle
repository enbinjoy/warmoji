import Dependencies

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

java.toolchain.languageVersion.set(JavaLanguageVersion.of(BuildConfig.JAVA_VERSION))

android {
  namespace BuildConfig.ID
  compileSdk 35
  sourceSets {
    main {
      assets.setSrcDirs(['../assets'])
    }
  }
  packagingOptions {
		resources {
			excludes += ['META-INF/robovm/ios/robovm.xml', 'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES',
                   'META-INF/dependencies.txt', '**/*.gwt.xml', "DebugProbesKt.bin"]
			pickFirsts += ['META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/license.txt', 'META-INF/LGPL2.1',
                     'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/notice.txt']
		}
  }
  defaultConfig {
    applicationId BuildConfig.ID
    minSdkVersion 30
    targetSdkVersion 35
    versionCode BuildConfig.VERSION_CODE
    versionName BuildConfig.VERSION
    multiDexEnabled true
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

configurations { natives }

dependencies {
  implementation(project(":core"))
  implementation(Dependencies.GDX_BACKEND_ANDROID)
  implementation(Dependencies.KOTLINX_COROUTINES_ANDROID)
  natives(Dependencies.GDX_PLATFORM_NATIVES_ARM64_V8A)
  natives(Dependencies.GDX_PLATFORM_NATIVES_ARMEABI_V7A)
  natives(Dependencies.GDX_PLATFORM_NATIVES_X86)
  natives(Dependencies.GDX_PLATFORM_NATIVES_X86_64)
  natives(Dependencies.GDX_FREETYPE_PLATFORM_NATIVES_ARM64_V8A)
  natives(Dependencies.GDX_FREETYPE_PLATFORM_NATIVES_ARMEABI_V7A)
  natives(Dependencies.GDX_FREETYPE_PLATFORM_NATIVES_X86)
  natives(Dependencies.GDX_FREETYPE_PLATFORM_NATIVES_X86_64)
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper jniLibs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("src/main/jniLibs/armeabi-v7a/").mkdirs()
    file("src/main/jniLibs/arm64-v8a/").mkdirs()
    file("src/main/jniLibs/x86_64/").mkdirs()
    file("src/main/jniLibs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
      if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
      if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")
      if(jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
      if(outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
  packageTask.dependsOn 'copyAndroidNatives'
}
